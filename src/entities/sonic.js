import k from "../kaplayCtx"; // Импорт контекста игры Kaplay

// Функция для создания и возврата персонажа Соника на заданной позиции
export function makeSonic(pos) {
  // Создаём сущность Соника с необходимыми свойствами
  const sonic = k.add([
    k.sprite("sonic", { anim: "run" }), // Добавляем спрайт Соника с анимацией "бег"
    k.scale(4), // Увеличиваем масштаб Соника в 4 раза
    k.area(), // Включаем обнаружение столкновений
    k.anchor("center"), // Устанавливаем точку привязки в центр спрайта
    k.pos(pos), // Устанавливаем позицию, переданную в аргументе (pos)
    k.body({ jumpForce: 1700 }), // Добавляем физическое тело с силой прыжка 1700
    {
      // Добавляем пользовательские свойства и методы для Соника
      ringCollectUI: null, // Заглушка для текста интерфейса, отображающего собранные кольца

      // Метод для настройки управления (например, прыжок)
      setControls() {
        k.onButtonPress("jump", () => { // Слушаем нажатие кнопки "прыжок"
          if (this.isGrounded()) { // Проверяем, находится ли Соник на земле
            this.play("jump"); // Воспроизводим анимацию прыжка
            this.jump(); // Заставляем Соника прыгать
            k.play("jump", { volume: 0.5 }); // Проигрываем звук прыжка с громкостью 0.5
          }
        });
      },

      // Метод для настройки событий при взаимодействии Соника с землёй
      setEvents() {
        this.onGround(() => { // Когда Соник касается земли
          this.play("run"); // Воспроизводим анимацию бега
        });
      },
    },
  ]);

  // Добавляем элемент интерфейса для отображения информации о собранных кольцах
  sonic.ringCollectUI = sonic.add([
    k.text("", { font: "mania", size: 24 }), // Создаём текстовый элемент интерфейса с указанным шрифтом и размером
    k.color(255, 255, 0), // Устанавливаем цвет текста жёлтым (255, 255, 0)
    k.anchor("center"), // Устанавливаем точку привязки текста в центр
    k.pos(30, -10), // Позиционируем текст над Соником на 10 единиц выше
  ]);

  // Возвращаем сущность Соника
  return sonic;
}